<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project>
<project name="Jame" default="build" basedir=".">

    <property name="jarfile" value="lib/jame.jar" />
    <property name="srcjarfile" value="jame-src.zip" />
    <property name="zipfile" value="jame.zip" />
    <property name="publish.dir" value="/gidea/documents/public/jame/" />

    <path id="project.class.path">
        <fileset dir="lib">
            <include name="jame.jar"/>
        </fileset>
    </path>

	<!-- build -->
	<target name="build" depends="java,javah,native">
	</target>

    <!-- Clean -->
	<!-- Note, this does NOT remove .so or .dlls from /lib/native/ -->
    <target name="clean">
        <delete includeEmptyDirs="true">
            <fileset dir=".">
                <include name="lib/jame.jar" />
                <include name="publish/jame-src.zip" />
                <include name="publish/jame.zip" />
                <include name="src-native/*.o" />
                <include name="src-native/*.so" />
                <include name="native/**/*.o" />
                <include name="native/**/*.so" />
                <include name="src-native/*.dll" />
                <include name="build/**" />
                <exclude name="build" />
                <include name="docs/api/**" />
            </fileset>
        </delete>
    </target>

	<!-- java -->
    <target name="java">
        <mkdir dir="build"/>
        <mkdir dir="lib"/>
        <javac
            srcdir="src"
            destdir="build"
            classpathref="project.class.path"
            deprecation="on"
        	debug="on"
        	debugLevel="lines,vars,source"
        	includeantruntime="false"
        />
        <jar jarfile="${jarfile}">
            <fileset dir="build">
                <include name="**/*.class"/>
          </fileset>
        </jar>
    </target>
    	
	<!-- native -->
    <target name="native">
	    <exec executable="/usr/bin/make" dir="src-native" osfamily="unix">
	    	  <arg value="JAVA_INCLUDE=-I ${java.home}/../include -I ${java.home}/../include/linux -I ${java.home}/include -I ${java.home}/include/linux"/>
	    </exec>
	    <exec executable="C:\MinGW\bin\mingw32-make" dir="src-native" osfamily="windows">
	        <arg value="--file=Makefile-win32"/>
	    	<arg value="JAVA_INCLUDE=${java.home}\..\include"/>
	    </exec>
    </target>

	<!-- javah -->
	<target name="javah" depends="java">
	   <javah class="uk.co.nickthecoder.jame.Jame" outputFile="src-native/jame.h" classpathref="project.class.path"/>
	   <javah class="uk.co.nickthecoder.jame.Video" outputFile="src-native/video.h" classpathref="project.class.path"/>
       <javah class="uk.co.nickthecoder.jame.Surface" outputFile="src-native/surface.h" classpathref="project.class.path"/>
       <javah class="uk.co.nickthecoder.jame.TrueTypeFont" outputFile="src-native/trueTypeFont.h" classpathref="project.class.path"/>
       <javah class="uk.co.nickthecoder.jame.Events" outputFile="src-native/events.h" classpathref="project.class.path"/>
       <javah class="uk.co.nickthecoder.jame.Audio" outputFile="src-native/audio.h" classpathref="project.class.path"/>
	   <javah class="uk.co.nickthecoder.jame.Sound" outputFile="src-native/sound.h" classpathref="project.class.path"/>
	</target>
	
	<!-- creates a jar file of just the source code. -->
    <target name="src">


    </target>
	
	<!-- Generate javadocs -->
    <target name="javadoc" depends="java">
        <copy file="docs/stylesheet.css" todir="docs/api/"/>
        <javadoc sourcepath="src"
            classpathref="project.class.path"
            access="protected"
            destdir="docs/api"
            windowtitle="jame">

            <package name="uk.co.nickthecoder.jame"/>
            <package name="uk.co.nickthecoder.jame.event"/>

            <link packagelistloc="http://docs.oracle.com/javase/7/docs/api/package-list" href="http://docs.oracle.com/javase/7/docs/api/"/>
            
        </javadoc>
    </target>

    <!-- tests not implemented yet -->
    <target name="test" depends="java">

        <junit fork="true" printsummary="false" haltonfailure="yes" dir="." >
            <classpath refid="project.class.path" />

            <formatter type="plain" usefile="false" />

            <batchtest toDir="testResults" >
                <fileset dir="src">
                    <include name="**/*Test.java" />
                </fileset>
            </batchtest>

        </junit>
    </target>
		
    <!-- publish : Used to create zip files of the source and binaries -->
    <target name="publish" depends="clean,java,javadoc">

        <mkdir dir="${publish.dir}"/>

        <mkdir dir="publish"/>
        <jar jarfile="${publish.dir}/${zipfile}">
            <fileset dir=".">
                <include name="lib/jame.jar"/>
                <include name="lib/native/x86_64/libjame.so"/>
                <include name="lib/native/win32/*.dll"/>
                <include name="test.sh"/>
                <include name="icon.bmp"/>
                <include name="resources/**/*.png"/>
                <include name="resources/**/*.bmp"/>
                <include name="resources/**/*.ttf"/>
            </fileset>
        </jar>
    	
        <jar jarfile="${publish.dir}/${srcjarfile}">
            <fileset dir=".">
                 <include name="src/**/*.java"/>
                 <include name="src-native/**/*.c"/>
                 <include name="src-native/**/*.h"/>
                 <include name="src-native/Makefile*"/>
                 <include name="build.xml"/>
                 <include name="test.sh"/>
                 <include name="test.bat"/>
                 <include name="icon.bmp"/>
                 <include name="resources/**/*.png"/>
                 <include name="resources/**/*.bmp"/>
                 <include name="resources/**/*.ttf"/>
                 <exclude name="src-native/win-dependencies"/>
            </fileset>
        </jar>
    	
        <buildnumber/>
        
        <mkdir dir="${publish.dir}/builds/${build.number}/"/>

        <copy file="${publish.dir}/${zipfile}" todir="${publish.dir}/builds/${build.number}/"/>        
        <copy file="${publish.dir}/${srcjarfile}" todir="${publish.dir}/builds/${build.number}/"/>   
        <copy todir="${publish.dir}/api/">
            <fileset dir="docs/api"/>
        </copy>

    </target>
    
</project>

